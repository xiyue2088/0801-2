using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.ComponentModel;
using System.Globalization;
using System.Collections;

using IS3.Core;

namespace IS3.Desktop
{
    public class ObjectValueConverter : IValueConverter
    {
        public object Convert(object value, Type targetType,
            object parameter, CultureInfo culture)
        {
            return ObjectHelper.ObjectToString(value, true);
        }

        public object ConvertBack(object value, Type targetType,
            object parameter, CultureInfo culture)
        {
            return null;
        }
    }

    /// <summary>
    /// Interaction logic for IS3DataGrid.xaml
    /// </summary>
    /// 
    public partial class IS3DataGrid : UserControl
    {
        protected int _maxColWith = 300;
        //protected ObjectValueConverter _objectConverter
        //    = new ObjectValueConverter();

        public IS3DataGrid()
        {
            InitializeComponent();
        }

        private void DGObjectDataGrid_AutoGeneratingColumn(object sender,
            DataGridAutoGeneratingColumnEventArgs e)
        {
            // "Graphics" and "Attributes" are used internally.
            if (e.PropertyName == "Graphics" ||
                e.PropertyName == "Attributes" ||
                e.PropertyName == "IsSelected" ||
                e.PropertyName == "OBJECTID" ||
                e.PropertyName == "SHAPE" ||
                e.PropertyName == "Shape" ||
                e.PropertyName == "SHAPE_Length" ||
                e.PropertyName == "Shape_Length" ||
                e.PropertyName == "SHAPE_Area" ||
                e.PropertyName == "Shape_Area"
                )
            {
                e.Cancel = true;
                return;
            }

            //DataGridTextColumn tcol = e.Column as DataGridTextColumn;
            //if (tcol == null)
            //    return;

            //// Does the column data type contain the ICollection interface?
            //// If yes, we need the CollectionValueConverter to display data.
            //if (typeof(ICollection).IsAssignableFrom(e.PropertyType))
            //{
            //    Binding binding = tcol.Binding as Binding;
            //    binding.Converter = _objectConverter;
            //}
            //// Is the column data class type other than String?
            //// If yes, we need the ClassValueConverter to display data.
            //else if (e.PropertyType.IsClass && e.PropertyType.Name != "String")
            //{
            //    Binding binding = tcol.Binding as Binding;
            //    binding.Converter = _objectConverter;
            //}
        }

        private void DGObjectDataGrid_AutoGeneratedColumns(object sender,
            EventArgs e)
        {
            if (DGObjectDataGrid.Columns.Count == 0)
                return;

            try
            {
                DataGridColumn col =
                    DGObjectDataGrid.Columns.FirstOrDefault(
                    c => c.Header.ToString() == "ID");
                if (col != null)
                    col.DisplayIndex = 0;

                col = DGObjectDataGrid.Columns.FirstOrDefault(
                    c => c.Header.ToString() == "Name");
                if (col != null)
                    col.DisplayIndex = 1;

                col = DGObjectDataGrid.Columns.FirstOrDefault(
                    c => c.Header.ToString() == "FullName");
                if (col != null)
                    col.DisplayIndex = 2;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            foreach (DataGridColumn _iter in DGObjectDataGrid.Columns)
            {
                //_iter.MaxWidth = 300;
            }
        }
    }
}
